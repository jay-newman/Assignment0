Collections"
-Arrays
-Hash Maps


fun main(args: Array<String>) {
    // inMutability - can't be changed
    // val is constant
    // 
    // String explicity setting type - when would I need to do that?
    var name: String = "JayN"
    name = "Batman"
    var isAwesome = true
    isAwesome = false
//     println("Is " + name + " awesome? The answer is : " + isAwesome)
    
    // Numbers
    var a = 2 					// int
    var b = 2.5			// double 64 bit number
    var c = 123.444f			// float 32 bit number
    var d = 123123123123123123L // long 64 bit number
    
    val aDouble = a.times(b)
    
    
//     println(aDouble)
    
    var hero: String
    hero = "Robin"
//     println(hero)

    
    
   
  
}

=========================================================================================================
/**
 * You can edit, run, and share this code.
 * play.kotlinlang.org
 */

// \t , \n , \b , \r
fun main(args: Array<String>) {
 
	val str = "May the force be with you."
    
    val str1 = "My dad said thefunniest thing he said \n\"A joke\" I pooped "
    
    // | to trim margin
    
    val rawCrawl = """|A long time ago, 
    |in a galaxy
    |far, far, away...
    |Bumm Bumm Bummmmm""".trimMargin()
	//     println(rawCrawl)
 
	//  Limiter Margin Prefix
     
    val rawCrawl2 = """>A long time ago, 
    >in a galaxy
    >far, far, away...
    >Bumm Bumm Bummmmm""".trimMargin(">")
	//     println(rawCrawl2)
    
    
    // Strings are a collection of characters, in Kotlin can loop over them
    
    //     for (char in str) {
    //         println(char)
    //     }
         
    // Compare strings
         
    val contentEquals = str.contentEquals("May the force be with you.")
//     println(contentEquals)
    
    val contains = str.contains("Force" , false) // 
//     println(contains)
    
    val uppercase = str.toUpperCase()
    val lower = str.toLowerCase()
//     println(uppercase)
//     println(lower)
    
    val num = 2131
    val stringNum = num.toString()
//     println(stringNum)
    
    val subsequence = str.subSequence(4, 13)
//     println(subsequence)
    
    val luke = "Luke Skywalker"
    val lightSaberColor = "green"
    val vehicle = "landspeeder"
    
//     println(luke + " has a " + lightSaberColor + " lightsaber and drives a " +vehicle)
    
//     println("$luke has a $lightSaberColor lightsaber and drives a $vehicle")

//     println("Lukes full name $luke has ${luke.length} characters")
//     println("Lukes full name $luke has ${luke.toUpperCase()} characters")

=========================================================================================================
fun forceChoke(){
        println("You have failed me for the last time Admiral...")
    }
 
	forceChoke()
   
    // "line" is name of argument passed as String
   	fun makeAnEntrance(line: String){
        println(line)
    }
    
    makeAnEntrance("I find your lack of faith disturbing.")
    
    // Multiple Integer Arguments passed and returning Int
    fun calculateNumberGoodGuys(rebels: Int, ewoks: Int): Int{
        val goodGuys = rebels + ewoks
        return goodGuys
    }
    
    val rebels = calculateNumberGoodGuys(5, 8)
    println("Number of good guys is: $rebels badasses")
    println("Number of good guys is: ${calculateNumberGoodGuys(5,7)} badasses")
    
    fun vaderIsFeeling(mood: String = "angry"){
        println(mood)
    }
    
    vaderIsFeeling()
    vaderIsFeeling("meh")
  
   
=========================================================================================================


val a = 2
    val b = 3
    
    if (a == b) {
        println("A does in fact equal B")
    }
    
    if (a != b) {
        println("A does not equal B")
    }
    
    val balance = 100
    val price = 500
    
    if (balance >= price) {
        println("\nYou can buy this!")
    }
    else {
        println("\nYou can't buy this!")
    }
    
    // == != > < >= <=
    val degrees = 49
    
    if (degrees >= 70) {
        println("\nThis is some nice weather")
    }
    else if (degrees < 70 && degrees >= 50) {
        println("\nGrab a sweater")
    }
    else {
        println("\nHoly crap its cold!!")
    }
    
    //bools
    val isHungry = true
    val isBored = false
    
    if (isHungry == true || isBored == true){
//         println("\nLets get pizza")
    }
    
    // Don't need true ^
    if (isHungry || isBored){
//         println("\nLets get pizza!\n")
    }
    
    // Switch Statement or when statement
    println("\n")
    
    val x = 2
    
    when (x) {
        1 -> println("x == 1")
        2 -> println("x == 2")
        else -> println("x does not equal 1 or 2!")
    }
    
    fun vaderFeeling(mood: String = "angry"){
        if (mood == "angry"){
            println("run for the hills, Vader is $mood")
        }
        else {
            println("whatever you do, don't make him angry")
        }
    }
    println("\n")
    vaderFeeling()
    vaderFeeling("happy")

=========================================================================================================

// Can't change list is listOf
    val imperials = listOf("Emperor" , "Darth Vader" , "Boba Fett" , "Tarkin")
    
//     println(imperials.sorted())
//     println(imperials[1])
//     println(imperials)
//     println(imperials.first())
//     println(imperials.last())
//     println(imperials.contains("Emperor"))
//     println(imperials.contains("Luke"))
    
    // Can change list is arrayListOf
    val rebels = arrayListOf("Luke" , "Han", "ObiWan" , "Yoda")
//     println(rebels.size)
//     rebels.add("Chewbacca")
//     println(rebels.size)
//     println(rebels)
//     rebels.add(0, "Lando")
//     println(rebels)
//     println(rebels.indexOf("ObiWan"))
//     rebels.removeAt(4)
//     println(rebels)
    
    // Hash Map  key and value - name and phone number
    val rebelVehiclesMap = mapOf("Solo" to "Millenium Falcon", "Luke" to "Landspeeder")
//     println(rebelVehiclesMap["Solo"])
//     println(rebelVehiclesMap.get("Solo"))
//     println(rebelVehiclesMap.getOrDefault("Leiah" , "This ship doesn't exist"))
//     println(rebelVehiclesMap.values)
    
  	// Can change values and add to it
    val rebelVehicles = hashMapOf("Solo" to "Millenium Falcon",
                                     "Luke" to "Landspeeder" ,
                                    "Boba Fett" to "Slave1")
    
    println(rebelVehicles.values)
    rebelVehicles["Luke"] = "XWing"
    println(rebelVehicles)
    rebelVehicles.put("Leiah" , "Tantive IV")
    println(rebelVehicles)
    rebelVehicles.remove("Boba Fett")
    println(rebelVehicles)
    println(rebelVehicles.isEmpty())
 
    rebelVehicles.clear()
    println(rebelVehicles)

=========================================================================================================


//Loops

    val rebels = arrayListOf("Luke" , "Han", "ObiWan" , "Yoda")
    
    
    val rebelVehicles = hashMapOf("Solo" to "Millenium Falcon",
                                     "Luke" to "Landspeeder" ,
                                    "Boba Fett" to "Slave1")
    
    for (rebel in rebels){
        println("Name: $rebel")
    }
    
    for ((key, value) in rebelVehicles){
        println("Key: $key\tVehicle: $value")
    }
    
    var x = 10
    
    while (x > 0) {
        println(x)
        x--
    }
    
=========================================================================================================


    // Variables have to be initialized at point of declaration
    
	var name : String = "Jay"
    
//     name = null
    
    // ? is saying this type can be nullible
    var nullableName : String? = "Do I really exist?"
    nullableName = null
    // Null Check
    
    var length = 0
    if (nullableName != null){
		length = nullableName.length
    }
    else {
        length = -1
    }
    
    // More concise way to do this ^
    
    val l = if (nullableName != null) nullableName.length else -1
    
    // Second method Safe Call Operator ?
   
    println(nullableName?.length)
    
    // Third method is Elvis Operator
    // If there is non null value in nullableName then assign or assign -1
    
    val len = nullableName?.length ?: -1
    val noName = nullableName ?: "No one knows me..."
    println(noName)
    
    // !! will return non null value of variable if it exists or crash
    // Go into nullableName and we know its there except its not there crash
    // Only use when you 100% know value exists
    println(nullableName!!.length)

=========================================================================================================

// Classes

// class Car constructor(make: String, model: String){
     
//     val make = make
//     val model = model
        
// }

class Car(val make: String, val model: String){
    
    fun accelerate(){
        println("vroom pshhh vroom pshhh")
    }
}

class Truck(val make: String, val model: String, val towingCap: Int){
    
    fun tow(){
        println("Taking the horses to the rodeo!")
    }
}

fun main(args: Array<String>) {
    
    val car = Car("Toyota" , "Supra")
    
    println(car.make)
    println(car.model)
    car.accelerate()
    
    val truck = Truck("Ford" , "F350" , 2000)
    println(truck.make)
    println(truck.model)
    println(truck.towingCap)
    truck.tow()
    
    
    
   
    
    
}

=========================================================================================================

// Classes

// class Car constructor(make: String, model: String){
     
//     val make = make
//     val model = model
        
// }

// class Car(val make: String, val model: String, var color: String){
    
//     fun accelerate(){
//         println("vroom pshhh vroom pshhh")
//     }
    
//     fun details(){
//         println("This is a $color $make $model\n")
//     }
// }

// class Truck(val make: String, val model: String, val towingCap: Int){
    
//     fun tow(){
//         println("Taking the horses to the rodeo!")
//     }
    
//     fun details(){
//         println("The $make $model has a towing capactiy of $towingCap lbs")
//     }
// }
// 

open class Vehicle(val make: String, val model: String){
    
    open fun accelerate() {
        println("vroom vroom")
    }
    
    fun park(){
        println("parking the vehicle")
    }
    
    fun brake(){
        println("STOP")
    }
}

class Car(make: String, model: String, var color: String) : Vehicle(make, model){
    
}

class Truck(make: String, model: String, val towingCap: Int) : Vehicle(make, model) {
    override fun accelerate() {
        println("We are gonna need to hit the lotto")
    }
    
    fun tow() {
        println("We be towin this heavy shit")
    }
}

fun main(args: Array<String>) {
    
    val tesla = Car("Tesla", "ModelS","Red")
    tesla.accelerate()
    tesla.brake()
    tesla.park()
    
    val truck = Truck("Ford" , "F-350" , 15000)
    truck.accelerate()
    truck.tow()
    
//     val car = Car("Toyota" , "Supra", "Black")
    
//     println(car.make)
//     println(car.model)
//     car.accelerate()
//     car.details()
    
//     val truck = Truck("Ford" , "F350" , 2000)
//     println(truck.make)
//     println(truck.model)
//     println(truck.towingCap)
//     truck.tow()
//     truck.details() 
    
}
    
=========================================================================================================


class Car(val make: String, val model: String, var color: String){
    
    fun accelerate(){
        println("vroom pshhh vroom pshhh")
    }
    
    fun details(){
        println("This is a $color $make $model\n")
    }
}

class Truck(val make: String, val model: String, val towingCap: Int){
    
    fun tow(){
        println("Taking the horses to the rodeo!")
    }
    
    fun details(){
        println("The $make $model has a towing capactiy of $towingCap lbs")
    }
}

fun main(args: Array<String>) {
    
    // Lamda expression is a function literal
    // Parameteres on left side of arrow
    // Return - Body of Function literal on right of  arrow
    // Why not use a function to print?
    // We will see what the advantages of lamdas are
    // Creating variable and assigning the lambda expression which has a
    // function literal
    
    val printMessage = { message: String -> println(message)}
    
    printMessage("Hello World!")
    
    val sumA = { x: Int, y: Int -> x + y}
    println(sumA(5, 3))
    //  Same thing as sumA
    val sumB : (Int, Int) -> Int = {x,y -> x+y}
    
    // Unit is like void return nothing
    fun downloadData(url: String, completion: () -> Unit){
        // sent a download request
        // we got back data
        // there were no network errors
        completion()
        
    }
    
    // call downloadDataFunction
    
    downloadData("fakeUrl.com" , {
        println("The code in this block will only run after" +
                "the completion()")
    })
    
    fun downloadCarData(url: String, completion: (Car) -> Unit){
        // send a download request
        // we got back some car data from our API
        
        val car = Car("Tesla" , "Modelx" , "Blue")
        completion(car)
    }
    
    downloadCarData("fakeUrl.com"){ car ->
        println(car.color + " " + car.make + " " + car.model)
        
    }
//  Can do this instead
//     downloadCarData("fakeUrl.com"){ 
//         println(it.color + " " + it.make + " " + it.model)
        
//     }
    
    fun downloadTruckData(url: String, completion: (Truck?, Boolean) -> Unit) {
        // make the web request
        // we get the results back
        val webRequestSuccess = false
        if (webRequestSuccess){
            // recieved truck data
            val truck = Truck("Ford" , "F-350" , 10000)
            completion(truck, true)
        }
        else {
            completion(null, false)
        }
        
    }
    
    downloadTruckData("fakeUrl.com") { truck, success ->
        if (success == true) {
            // do something with the truck
            truck?.tow()
        }
        else {
            // handle the web request failure
            println("Something went wrong!")
        }
        
    }
    
   
}

=========================================================================================================

















    
